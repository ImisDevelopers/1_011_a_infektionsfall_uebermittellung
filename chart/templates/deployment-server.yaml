apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "imis.server.fullname" . }}
  labels:
  {{- include "imis.server.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
  {{- include "imis.server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
    {{- include "imis.server.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - name: imis-server
        image: "{{- .Values.image.repository }}/imis-server:{{- .Values.gitSha }}"
        ports:
        - containerPort: 8080
        env:
        - name: CLUSTER_ENVIRONMENT
          value: {{ .Values.env }}
        - name: SPRING_PROFILES_ACTIVE
          value: production
        - name: SPRING_DATASOURCE_URL{{ if eq .Values.env "production" }}
          value: jdbc:postgresql://localhost:5432/postgres
          {{ else }}
          value: jdbc:postgresql://localhost:5432/staging{{ end }}
        - name: SPRING_DATASOURCE_USERNAME
          value: postgres
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: imis-sentry
              key: backend_dsn
        volumeMounts:
        - name: cloudstore-service-account
          mountPath: /usr/local/cloud-store
          readOnly: true
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 40
          timeoutSeconds: 2
          periodSeconds: 3
          failureThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 40
          timeoutSeconds: 2
          periodSeconds: 8
          failureThreshold: 1
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.14
        command: ["/cloud_sql_proxy",
                  "-instances=onyx-yeti-271818:europe-west3:challenge-11=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: cloudsql-instance-credentials
          mountPath: /secrets/cloudsql
          readOnly: true
      volumes:
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql
      - name: cloudstore-service-account
        secret:
          secretName: cloudstore
